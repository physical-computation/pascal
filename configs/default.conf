CC=clang
LD=ld

# macOS default configuration
ifeq ($(PLATFORM), darwin)
MAP=-map $(BUILD_DIR)/$(ENTRYPOINT).map

ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_GSL))
INCLUDE_FLAGS+= -I/opt/homebrew/include/
LDFLAGS+=-L/opt/homebrew/lib -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -lgsl -lgslcblas -macos_version_min 22.4 -lSystem
CFLAGS=-DDARWIN -D'TENSOR_BACKEND=$(TENSOR_BACKEND)'

else ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_BLAS))

INCLUDE_FLAGS+=-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Headers/
LDFLAGS+=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -macos_version_min 22.4 -lSystem
FRAMEWORK_FLAGS+=-F/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/ -framework accelerate
CFLAGS+=-DDARWIN -D'TENSOR_BACKEND=$(TENSOR_BACKEND)'

else ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_CLAPACK))
LDFLAGS+=-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -macos_version_min 22.4 -lSystem
CFLAGS+=-DDARWIN -D'TENSOR_BACKEND=$(TENSOR_BACKEND)'
endif

# linux default configuration
else
CC=gcc
LD=gcc
ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_GSL))
CFLAGS+=-DLINUX -D'TENSOR_BACKEND=$(TENSOR_BACKEND)'
LDFLAGS+=-lgsl -lm


else ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_BLAS))
$(error ERROR: BLAS backend not supported on Linux yet)

else ifeq ($(TENSOR_BACKEND), $(TENSOR_BACKEND_CLAPACK))
INCLUDE_FLAGS+=-I$(INCLUDE_DIR)
CFLAGS+=-DLINUX -D'TENSOR_BACKEND=$(TENSOR_BACKEND)'
LDFLAGS+=-lm
endif
endif
